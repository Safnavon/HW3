ast:
    AST_CLASS_BODY - asaf the big - done
    AST_CLASS_BODY_ITEM - asaf - done
    AST_CLASS_DECLARE - asaf the big - done
    AST_EXP
    AST_EXP_BINOP - dror - done
    AST_EXP_CALL - nitzan
    AST_EXP_INT - dror - done
    AST_EXP_LIST - dror - done
    AST_EXP_NEW_ARRAY - asaf - done
    AST_EXP_NEW_INSTANCE - dror - done
    AST_EXP_NULL - dror - done
    AST_EXP_STRING - asaf the big - done
    AST_EXP_VAR - nitzan - done
    AST_FIELD - asaf the big - done
    AST_FORMAL - nitzan - done
    AST_FORMAL_LIST - nitzan - done
    AST_METHOD_CALL - nitzan - done
    AST_METHOD_DECLARE - nitzan - done
    AST_Node
    AST_PROGRAM - dror - done
    AST_STMT - dror - done
    AST_STMT_ASSIGN - nitzan -done
    AST_STMT_BLOCK - dror - done
    AST_STMT_CALL - dror - done
    AST_STMT_DECLARE - nitzan - done
    AST_STMT_IF - asaf the big - done
    AST_STMT_LIST - dror - done
    AST_STMT_RETURN - nitzan
    AST_STMT_WHILE - asaf the big - done
    AST_VAR - nitzan - done
    AST_VAR_FIELD - nitzan - done
    AST_VAR_SIMPLE - nitzan - done
    AST_VAR_SUBSCRIPT - asaf the big - done

cgen:
    T_Binop - dror - done
    T_Call - nitzan
    T_CJump - dror - done
    T_Concat - dror - done
    T_Const - dror - done
    T_Exp
    T_ExpList - nitzan
    T_Function - nitzan
    T_JumpLabel - asaf the big - done
    T_JumpRegister - asaf the big - done
    T_Label - dror - done
    T_Mem - dror - done
    T_Move
    T_Relop - asaf the big - done
    T_Seq - dror - done
    T_Temp - dror - done
    T_Malloc - dror - done
    T_Exit - nitzan - done
    T_PrintInt - asaf the big - done

program prologue:
    exit on access violation (access violation label)

misc:
    class checker support for function tables - dror - done
    class checker offsets - dror - done


notes and questions:
        -can we use CJump with only boolean value?
        create "eval" function on AST_EXP(interface and impl) that evaluates that expression's
        boolean value (to use in "while" and "if" T_Cjump node).
        meaning our CJump implementation should also be changed (always check if value in input T_MEM is > 0 and go to relevant label)
        -DROR:
        CJump is not a real mips command
        we have beq (branch equals), bne (branch not equals) and j (jump) [there are more: http://www.cs.umd.edu/class/sum2003/cmsc311/Notes/Mips/jump.html ]
        we can do something like this:
        translating this ic:
            if(foo())
                x = 1;
            else
                x = 2;
            y = 1
        into mips:
                sw Temp_222, RESULT OF foo()
                bne Temp_222, $zero, Label_else#56
                // x = 1;
                j Label_endif#56
            Label_else#56:
                // x = 2;
                j Label_endif#56
            Label_endif#56:
                // y = 1